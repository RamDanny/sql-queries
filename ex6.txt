Ex.6: PL/SQL Stored Procedures and Functions

Bakery Database 

Aim:
Consider the following relations for the Bakery database: 
CUSTOMERS (cid, fname, lname)
PRODUCTS (pid, flavor, food, price)
RECEIPTS (rno, rdate, cid)
ITEM_LIST (rno, ordinal, item)
Write PL/SQL procedures for the given questions


Schema Diagram:




SQL> REM ***Q1 For the given receipt number, calculate the Discount as follows:
SQL> REM For total amount > $10 and total amount < $25: Discount=5%
SQL> REM For total amount > $25 and total amount < $50: Discount=10%
SQL> REM For total amount > $50: Discount=20%
SQL> REM Calculate the amount (after the discount) and update the same in Receipts table.***
SQL> CREATE OR REPLACE PROCEDURE disccalc
  2  (rn IN receipts.rno%type) IS
  3    fname_c customers.fname%type;
  4    lname_c customers.lname%type;
  5    rdate_c receipts.rdate%type;
  6    total_amount number:=0;
  7    sno number:=0;
  8    disc number(2);
  9    disc_amount number;
 10    final_amount real;
 11    cursor c1 is
 12      SELECT food,flavor,price
 13      FROM item_list,products
 14      WHERE rno=rn and pid=item;
 15    record c1%rowtype;
 16  begin
 17    SELECT fname,lname,rdate into fname_c,lname_c,rdate_c
 18    FROM customers,receipts
 19    WHERE customers.cid=receipts.cid and receipts.rno=rn;
 20    dbms_output.put_line('************************************************************');
 21    dbms_output.put_line('Receipt Number :'||rn);
 22    dbms_output.put_line('Customer name :'||fname_c||' '||lname_c);
 23    dbms_output.put_line('Receipt date :'||rdate_c);
 24    dbms_output.put_line('************************************************************');
 25    open c1;
 26    dbms_output.put_line('Sno       Flavor       Food       Price');
 27    loop
 28      fetch c1 into record;
 29      if c1%notfound then
 30        exit;
 31      else
 32        sno:=sno+1;
 33        dbms_output.put_line(sno||'.      '||record.flavor||'      '||record.food||'      '||reco
rd.price);
 34        total_amount:=total_amount+record.price;
 35      end if;
 36    end loop;
 37    dbms_output.put_line(' ');
 38    dbms_output.put_line('   Total = $'||total_amount);
 39    dbms_output.put_line(' ');
 40    dbms_output.put_line('Total Amount  :$ '||total_amount);
 41    if (total_amount>10 and total_amount<=25) then
 42      disc:=5;
 43    elsif (total_amount>25 and total_amount<=50) then
 44      disc:=10;
 45    elsif (total_amount>50) then
 46      disc:=20;
 47    else
 48      disc:=0;
 49    end if;
 50    discount_amount:=total_amount*disc*0.01;
 51    dbms_output.put_line('Discount('||disc||'%)  :$ '||discount_amount);
 52    dbms_output.put_line(' ');
 53    final_amount:=total_amount-discount_amount;
 54    dbms_output.put_line('Amount to be paid :$ '||final_amount);
 55    dbms_output.put_line('************************************************************');
 56    dbms_output.put_line('Great Offers! Discount up to 25% on DIWALI Festival Day...');
 57    dbms_output.put_line('************************************************************');
 58    close c1;
 59    exception
 60      when no_data_found then
 61        dbms_output.put_line('Invalid order number');
 62  end;
 63  /

Procedure created.

SQL> 
SQL> declare
  2  rn receipts.rno%type;
  3  begin
  4  rn:=&rno;
  5  disccalc(rn);
  6  end;
  7  /
Enter value for rno: 13355
old   4: rn:=&rno;
new   4: rn:=13355;
************************************************************
Receipt Number :13355
Customer name :TOUSSAND SHARRON
Receipt date :19-OCT-07
************************************************************
Sno       Flavor       Food       Price
1.      Opera      Cake      15.95
2.      Lemon      Cookie      .79
3.      Napoleon      Cake      13.49
Total = $30.23
Total Amount  :$ 30.23
Discount(10%)  :$ 3.023
Amount to be paid :$ 27.207
************************************************************
Great Offers! Discount up to 25% on DIWALI Festival Day...
************************************************************

PL/SQL procedure successfully completed.

SQL> 
SQL> REM *******************************************************************************************

SQL> 
SQL> 
SQL> REM ***Q2
SQL> REM Ask the user for the budget and his/her preferred food type. You recommend the best
SQL> REM item(s) within the planned budget for the given food type. The best item is
SQL> REM determined by the maximum ordered product among many customers for the given
SQL> REM food type.***
SQL> 
SQL> 
SQL> CREATE OR REPLACE PROCEDURE recom(foodtype in products.food%type,budget in products.price%type)
  2  IS 
  3   no_of_item int;
  4   maxPID products.pid%type;
  5   maxFlavor products.flavor%type;
  6   CURSOR ptr is SELECT p.pid as pid,p.flavor as flavor ,p.food as food,p.price as price FROM pro
ducts p 
  7          WHERE p.pid in (SELECT p1.pid FROM products p1 inner join item_list i on (p1.pid=i.item
));
  8   record ptr%rowtype;
  9   CURSOR ptr1 is  SELECT pid,flavor,price FROM products WHERE pid in (
 10     SELECT item FROM item_list  
 11     WHERE item IN (SELECT pid FROM products WHERE food=foodtype)
 12     GROUP BY item 
 13     HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM (SELECT * FROM item_list WHERE item IN (SELECT 
pid FROM products WHERE food=foodtype) ) group by item)
 14     ); 
 15   record1 ptr1%rowtype;
 16  BEGIN
 17    
 18   dbms_output.put_line('***************************************************');
 19   dbms_output.put_line('Budget: '|| budget || ' Food type: '|| foodtype);
 20   dbms_output.put_line('***************************************************');
 21   
 22   dbms_output.put_line('Item ID         Flavor         Food         Price ');
 23   open ptr;
 24   loop
 25    fetch ptr into record;
 26    IF (ptr%notfound) THEN
 27     exit;
 28    ELSIF(ptr%found and record.price<=budget and record.food=foodtype) THEN
 29     dbms_output.put_line(record.pid||'    '||record.flavor||'   '||record.food ||'    '||record.
price);  
 30     
 31    END IF;
 32   END LOOP;
 33   open ptr1;
 34   fetch ptr1 into record1;
 35   maxPID:= record1.pid;
 36   maxFlavor:= record1.flavor ;
 37   no_of_item := budget/record1.price;
 38   dbms_output.put_line(maxPId ||' with '|| maxFlavor||'flavor is the best item in '|| foodtype||
'!');
 39   dbms_output.put_line('You are entitled to purchase '|| no_of_item ||' '|| foodtype || ' ' || m
axFlavor || ' for the given budget !!!');
 40   dbms_output.put_line('***************************************************');
 41  END;
 42  / 

Procedure created.

SQL> 
SQL> 
SQL> 
SQL> DECLARE 
  2   foodtype products.food%type;
  3   budget number(3);
  4  BEGIN
  5   foodtype:='&foodtype';
  6   budget:=&budget;
  7   recom(foodtype,budget);
  8  END;
  9  /
Enter value for foodtype: Meringue
old   5:  foodtype:='&foodtype';
new   5:  foodtype:='Meringue';
Enter value for budget: 10
old   6:  budget:=&budget;
new   6:  budget:=10;
***************************************************
Budget: 10 Food type: Meringue
***************************************************
Item ID         Flavor         Food         Price
70-M-CH-DZ    Chocolate   Meringue    1.25
70-M-VA-SM-DZ    Vanilla   Meringue    1.15
70-M-CH-DZ with Chocolate flavor is the best item in Meringue!
You are entitled to purchase 8 Meringue Chocolate for the given budget !!!
***************************************************

PL/SQL procedure successfully completed.

SQL> DECLARE 
  2   foodtype products.food%type;
  3   budget number(3);
  4  BEGIN
  5   foodtype:='&foodtype';
  6   budget:=&budget;
  7   recom(foodtype,budget);
  8  END;
  9  /  
Enter value for foodtype: Tart
old   5:  foodtype:='&foodtype';
new   5:  foodtype:='Tart';
Enter value for budget: 20
old   6:  budget:=&budget;
new   6:  budget:=20;
***************************************************
Budget: 20 Food type: Tart
***************************************************
Item ID         Flavor         Food         Price
90-APR-PF    Apricot   Tart    3.25
90-APP-11    Apple   Tart    3.25
90-LEM-11    Lemon   Tart    3.25
90-BLU-11    Blueberry   Tart    3.25
90-CH-PF    Chocolate   Tart    3.75
90-ALM-I    Almond   Tart    3.75
90-BER-11    Berry   Tart    3.25
90-CHR-11    Cherry   Tart    3.25
90-BLK-PF    Blackberry   Tart    3.25
90-PEC-11    Pecan   Tart    3.75
90-APP-11 with Appleflavor is the best item in Tart!
You are entitled to purchase 6 Tart Apple for the given budget !!!
***************************************************

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> REM *******************************************************************************************

SQL> 
SQL> REM ***Q3: Take a receipt number and item as arguments, and insert this information into the
SQL> REM Item list. However, if there is already a receipt with that receipt number, then keep
SQL> REM adding 1 to the maximum ordinal number. Else before inserting into the Item list
SQL> REM with ordinal as 1, ask the user to give the customer name who placed the order and
SQL> REM insert this information into the Receipts.***
SQL> 
SQL> 
SQL> CREATE OR REPLACE PROCEDURE insertreceipts(rec IN receipts.rno%type, rdt IN receipts.rdate%type
,
  2  rcid IN receipts.cid%type) IS
  3  BEGIN
  4   insert into receipts values(rec,rdt,rcid);
  5  END;
  6  /

Procedure created.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE insertitem(rno IN receipts.rno%type, ordinal IN item_list.ordinal%t
ype,
  2  prodid IN item_list.item%type) IS
  3  BEGIN
  4   delete FROM item_list i WHERE i.rno=rno and i.item=prodid; 
  5   insert into item_list values(rno,ordinal,prodid);
  6  END;
  7  /

Procedure created.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE findcid(cfname IN customers.fname%type, clname IN customers.lname%t
ype,
  2  fcid OUT customers.cid%type) is
  3  BEGIN 
  4   SELECT c.cid into fcid
  5   FROM customers c
  6   WHERE c.fname=cfname and c.lname=clname;
  7  EXCEPTION
  8    WHEN no_data_found then
  9   DBMS_OUTPUT.PUT_LINE('Customer ID not found');
 10  
 11  fcid :=0;
 12  END;
 13  /

Procedure created.

SQL> 
SQL> 
SQL> DECLARE
  2  
  3  cfname customers.fname%type;
  4  clname customers.lname%type;
  5  fcid customers.cid%type;
  6  rec receipts.rno%type;
  7  ordi item_list.ordinal%type;
  8  prodid products.pid%type;
  9  rdt receipts.rdate%type;
 10  item_row item_list%rowtype;
 11  CURSOR c1 is SELECT * FROM item_list i
 12        WHERE i.rno = rec order by i.ordinal desc;
 13  maxordi item_list.ordinal%type;
 14  BEGIN
 15   rec :=&RECEIPT;
 16   prodid := '&product';
 17   open c1;
 18   fetch c1 into item_row;
 19   if (c1%rowcount>0) then
 20    begin
 21     dbms_output.put_line('the receipt number is present');
 22     ordi:= item_row.ordinal + 1;
 23     insertitem(rec,ordi,prodid);
 24     return;
 25    end;
 26   else
 27    begin
 28     dbms_output.put_line('Receipt number not found!!!');
 29     dbms_output.put_line('CREATE A RECEIPT: ');
 30     cfname := '&firstname';
 31     clname := '&lastname';
 32     rdt := '&date';
 33     findcid(cfname,clname,fcid);
 34     insertreceipts(rec,rdt,fcid);
 35     ordi := 1;
 36     insertitem(rec,ordi,prodid);
 37     return;
 38    end;
 39   end if;
 40  END;
 41  /
Enter value for receipt: 70796
old  15:  rec :=&RECEIPT;
new  15:  rec :=70796;
Enter value for product: 51-BC
old  16:  prodid := '&product';
new  16:  prodid := '51-BC';
Enter value for firstname: abc
old  30:    cfname := '&firstname';
new  30:    cfname := 'abc';
Enter value for lastname: def
old  31:    clname := '&lastname';
new  31:    clname := 'def';
Enter value for date: 3-oct-2007
old  32:    rdt := '&date';
new  32:    rdt := '3-oct-2007';
the receipt number is present

PL/SQL procedure successfully completed.

SQL> SELECT * FROM item_list WHERE rno = 70796;

       RNO    ORDINAL ITEM
---------- ---------- -------------------------
     70796          5 51-BC
     70796          1 45-CO
     70796          2 20-BC-L-10
     70796          3 45-CH
     70796          4 90-BLU-11

SQL> DECLARE
  2  
  3  cfname customers.fname%type;
  4  clname customers.lname%type;
  5  fcid customers.cid%type;
  6  rec receipts.rno%type;
  7  ordi item_list.ordinal%type;
  8  prodid products.pid%type;
  9  rdt receipts.rdate%type;
 10  item_row item_list%rowtype;
 11  CURSOR c1 is SELECT * FROM item_list i
 12        WHERE i.rno = rec order by i.ordinal desc;
 13  maxordi item_list.ordinal%type;
 14  BEGIN
 15   rec :=&RECEIPT;
 16   prodid := '&product';
 17   open c1;
 18   fetch c1 into item_row;
 19   if (c1%rowcount>0) then
 20    begin
 21     dbms_output.put_line('the receipt number is present');
 22     ordi:= item_row.ordinal + 1;
 23     insertitem(rec,ordi,prodid);
 24     return;
 25    end;
 26   else
 27    begin
 28     dbms_output.put_line('Receipt number not found!!!');
 29     dbms_output.put_line('CREATE A RECEIPT: ');
 30     cfname := '&firstname';
 31     clname := '&lastname';
 32     rdt := '&date';
 33     findcid(cfname,clname,fcid);
 34     insertreceipts(rec,rdt,fcid);
 35     ordi := 1;
 36     insertitem(rec,ordi,prodid);
 37     return;
 38    end;
 39   end if;
 40  END;
 41  /
Enter value for receipt: 70796
old  15:  rec :=&RECEIPT;
new  15:  rec :=70796;
Enter value for product: 51-BC
old  16:  prodid := '&product';
new  16:  prodid := '51-BC';
Enter value for firstname: abc
old  30:    cfname := '&firstname';
new  30:    cfname := 'abc';
Enter value for lastname: def
old  31:    clname := '&lastname';
new  31:    clname := 'def';
Enter value for date: 3-oct-2007
old  32:    rdt := '&date';
new  32:    rdt := '3-oct-2007';
the receipt number is present

PL/SQL procedure successfully completed.

SQL> SELECT * FROM item_list WHERE rno = 70796; 

       RNO    ORDINAL ITEM
---------- ---------- -------------------------
     70796          6 51-BC
     70796          1 45-CO
     70796          2 20-BC-L-10
     70796          3 45-CH
     70796          4 90-BLU-11

SQL> DECLARE
  2  
  3  cfname customers.fname%type;
  4  clname customers.lname%type;
  5  fcid customers.cid%type;
  6  rec receipts.rno%type;
  7  ordi item_list.ordinal%type;
  8  prodid products.pid%type;
  9  rdt receipts.rdate%type;
 10  item_row item_list%rowtype;
 11  CURSOR c1 is SELECT * FROM item_list i
 12        WHERE i.rno = rec order by i.ordinal desc;
 13  maxordi item_list.ordinal%type;
 14  BEGIN
 15   rec :=&RECEIPT;
 16   prodid := '&product';
 17   open c1;
 18   fetch c1 into item_row;
 19   if (c1%rowcount>0) then
 20    begin
 21     dbms_output.put_line('the receipt number is present');
 22     ordi:= item_row.ordinal + 1;
 23     insertitem(rec,ordi,prodid);
 24     return;
 25    end;
 26   else
 27    begin
 28     dbms_output.put_line('Receipt number not found!!!');
 29     dbms_output.put_line('CREATE A RECEIPT: ');
 30     cfname := '&firstname';
 31     clname := '&lastname';
 32     rdt := '&date';
 33     findcid(cfname,clname,fcid);
 34     insertreceipts(rec,rdt,fcid);
 35     ordi := 1;
 36     insertitem(rec,ordi,prodid);
 37     return;
 38    end;
 39   end if;
 40  END;
 41  /
Enter value for receipt: 9999
old  15:  rec :=&RECEIPT;
new  15:  rec :=9999;
Enter value for product: 70-W
old  16:  prodid := '&product';
new  16:  prodid := '70-W';
Enter value for firstname: LOGAN
old  30:    cfname := '&firstname';
new  30:    cfname := 'LOGAN';
Enter value for lastname: JULIET
old  31:    clname := '&lastname';
new  31:    clname := 'JULIET';
Enter value for date: 8-oct-2007
old  32:    rdt := '&date';
new  32:    rdt := '8-oct-2007';
Receipt number not found!!!
CREATE A RECEIPT:

PL/SQL procedure successfully completed.

SQL> SELECT * FROM item_list WHERE rno = 9999;

       RNO    ORDINAL ITEM
---------- ---------- -------------------------
      9999          1 70-W

SQL> 

SQL> 
SQL> REM *******************************************************************************************

SQL> 
SQL> REM ***Q4: Write a stored function to display the customer name who ordered maximum for the
SQL> REM given food and flavor.***
SQL> 
SQL> CREATE OR REPLACE FUNCTION maxcustomer(p IN products.pid%type) return varchar2 as
  2  c customers.cid%type;
  3  m int;
  4  n1 customers.fname%type;
  5  n2 customers.lname%type;
  6  name varchar2(40);
  7  BEGIN 
  8   SELECT max(count(*)) into m FROM receipts r inner join item_list i on (i.rno=r.rno)
  9   WHERE i.item = p
 10   group by r.cid;
 11   SELECT r.cid into c FROM receipts r join item_list i on (i.rno=r.rno)
 12   WHERE i.item = p
 13   group by r.cid
 14   having count(*) = m;
 15   
 16   SELECT c1.fname into n1 FROM customers c1 WHERE c1.cid=c;
 17   SELECT c1.lname into n2 FROM customers c1 WHERE c1.cid=c;
 18   
 19   name := n1|| n2;
 20   return name;
 21  END maxcustomer;
 22  /

Function created.

SQL> 
SQL> 
SQL> DECLARE
  2   name varchar2(40);
  3   p products.pid%type;
  4   fo products.food%type;
  5   fl products.flavor%type;
  6   
  7  BEGIN 
  8   fo:='&food';
  9   fl:='&flavor';
 10   SELECT p1.pid into p FROM products p1 WHERE p1.food = fo and p1.flavor =fl;
 11   name:=maxcustomer(p);
 12   dbms_output.put_line('Name: '|| name);
 13  END;
 14  /
Enter value for food: Danish
old   8:  fo:='&food';
new   8:  fo:='Danish';
Enter value for flavor: Blueberry
old   9:  fl:='&flavor';
new   9:  fl:='Blueberry';
Name: SOPKORAYFORD

PL/SQL procedure successfully completed.

SQL> SELECT fname,lname FROM customers WHERE cid = (
  2  SELECT r.cid  FROM receipts r join item_list i on (i.rno=r.rno)
  3   WHERE i.item = '51-APR' and cid = 14 
  4   group by r.cid
  5   having count(*) = (SELECT max(count(*)) FROM receipts r inner join item_list i on (i.rno=r.rno
)
  6   WHERE i.item = '51-APR'
  7   group by r.cid));

FNAME                     LNAME
------------------------- -------------------------
SOPKO                     RAYFORD

SQL> 
SQL> REM *******************************************************************************************

SQL> 
SQL> REM Implement Question (2) using stored function to return the amount to be paid and
SQL> REM update the same, for the given receipt number.
SQL> 
SQL> 
SQL> CREATE or REPLACE function discountamt(cp IN products.price%type, dis OUT products.price%type, 
dp OUT products.price%type) return products.price%type is
  2   sp products.price%type;
  3   begin
  4    dis:=0;
  5    dp:=0;
  6    if cp>0 and cp<25 then
  7     dis:=(5*cp)/100.00;
  8     dp:=5;
  9    else
 10     if cp>25 and cp<50 then
 11      dis:= (10*cp)/100.00;
 12      dp:=10;
 13     else
 14      if cp>50 then
 15       dis := (20*cp)/100.00;
 16       dp := 20;
 17      end if;
 18     end if;
 19    end if;
 20    sp := cp-dis;
 21    return sp;
 22   end;
 23  /

Function created.

SQL> 
SQL> declare
  2   sel receipts.rno%type;
  3   billdate receipts.rdate%type;
  4   custlname customers.lname%type;
  5   custfname customers.fname%type;
  6   cursor c1 is SELECT p.food, p.flavor, sum(p.price) 
  7         FROM products p join item_list i on i.item = p.pid
  8         WHERE i.rno = sel
  9         group by p.food,p.flavor;
 10   cp products.price%type;
 11   d products.price%type;
 12   dp products.price%type;
 13   sp products.price%type;
 14   counts integer;
 15   foodtype products.food%type;
 16   flavortype products.food%type;
 17   lprice products.price%type;
 18  begin
 19   sel := &receipt;
 20   SELECT sum(p.price) into cp FROM products p join item_list i on p.pid=i.item WHERE i.rno = sel
;
 21   SELECT count(count(*)) into counts FROM products p join item_list i on p.pid = i.item
 22   WHERE i.rno = sel
 23   group by p.food, p.flavor;
 24   open c1;
 25   SELECT c.lname, c.fname, r.rdate into custlname, custfname, billdate FROM receipts r join cust
omers c on c.cid = r.cid
 26   WHERE r.rno = sel;
 27  
 28   dbms_output.put_line('Customer name:'||custfname||' '||custlname);
 29   dbms_output.put_line('Receipt no:'||sel);
 30   dbms_output.put_line('Receipt date:'||billdate);
 31   dbms_output.put_line('-------------------------------------------------');
 32   dbms_output.put_line('RecNo Food     Flavor      Price');
 33   for a in 1..counts loop
 34    fetch c1 into foodtype,flavortype,lprice;
 35    dbms_output.put_line('    '||a||'     '||flavortype||'    '||foodtype||'     '||lprice);
 36   end loop;
 37   sp :=discountamt(cp,d,dp);
 38   dbms_output.put_line('---------------------------------------------------');
 39   dbms_output.put_line('Total = $'||cp);
 40   dbms_output.put_line('Discount ('||dp||'%) = $'||d);
 41   dbms_output.put_line('Grand total = $ '||sp);
 42   dbms_output.put_line('----------------------------------------------------');
 43   dbms_output.put_line('Upto 20% discount available!!!');
 44   dbms_output.put_line('----------------------------------------------------');
 45  end;
 46  /
Enter value for receipt: 13355
old  19:  sel := &receipt;
new  19:  sel := 13355;
Customer name:TOUSSAND SHARRON
Receipt no:13355
Receipt date:19-OCT-07
-------------------------------------------------
RecNo Food     Flavor      Price
1     Opera    Cake     15.95
2     Lemon    Cookie     .79
3     Napoleon    Cake     13.49
---------------------------------------------------
Total = $30.23
Discount (10%) = $3.023
Grand total = $ 27.207
----------------------------------------------------
Upto 20% discount available!!!
----------------------------------------------------

PL/SQL procedure successfully completed.

SQL> 
SQL> 



